plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id("com.jaredsburrows.license") version "0.9.0"
    id "net.linguica.maven-settings" version "0.5"
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id 'io.github.CDAGaming.cursegradle' version '1.6.1'
    id "com.modrinth.minotaur" version "2.+"
}

delete "src/main/java/com"
delete "changelog.txt"
delete "CREDITS.txt"
delete "LICENSE.txt"
delete "README.txt"
publish.dependsOn(clean)

task copyLicenses(type: Copy) {
    from 'build/reports/licenses'
    into 'lib_licences'
}
//TODO compileJava.dependsOn(copyLicenses)
//TODO copyLicenses.dependsOn("licenseReport")

version = "${major_version}.${minor_version}.${patch_version}"
group = "${domain}.${mod_id}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${rootProject.name}"

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://parchmentmc.org/docs/getting-started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: "${mcp_channel}", version: "${mc_version}"

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run/client')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', "${mod_id}"

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', "${mod_id}"

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run/testserver')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', "${mod_id}"

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run/data')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', "${mod_id}".toString(), '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }
    mavenCentral()
    maven {
        url = 'https://maven.skaggsm.com/releases'
    }
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    // Real mod deobf dependency examples - these get remapped to your current mappings
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

    implementation("com.skaggsm:java-mumble-link:${java_mumble_link_version}") {
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jdk8'
        exclude group: 'net.java.dev.jna'
    }
    shadow("com.skaggsm:java-mumble-link:${java_mumble_link_version}") {
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jdk8'
        exclude group: 'net.java.dev.jna'
    }
    runtimeOnly("com.skaggsm:java-mumble-link:${java_mumble_link_version}") {
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jdk8'
        exclude group: 'net.java.dev.jna'
    }

    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

shadowJar {
    classifier ""
    configurations = [project.configurations.shadow]

    relocate 'com.skaggsm.jmumblelink', 'lib.com.skaggsm.jmumblelink'
    relocate 'com.skaggsm.sharedmemory', 'lib.com.skaggsm.sharedmemory'
}

reobf {
    shadowJar {
        dependsOn createMcpToSrg
        mappings = createMcpToSrg.output
    }
}

artifacts {
    archives shadowJar
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    classifier ""
    manifest {
        attributes([
                "Specification-Title"     : "${mod_id}",
                "Specification-Vendor"    : "${modder}",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "${modder}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
shadowJar.finalizedBy('reobfShadowJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact shadowJar
        }
    }
    repositories {
        maven {
            name "local-test-repo"
            url "file:../ModdingMavenRepositories"
        }
        maven {
            name "minecraft-mods-repo"
            url "https://secretsoft.jfrog.io/artifactory/minecraft-mods/"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

curseforge {
    apiKey = "${curseforgeApiKey}"
    project {
        id = "${curseforge_project_id}"
        changelogType = 'markdown'
        changelog = rootProject.file('CHANGELOG.md').text
        releaseType = 'release'
        addGameVersion "${mc_version}"
        if(Boolean.parseBoolean(usableOnClientSide)) {
            addGameVersion 'Client'
        }
        if(Boolean.parseBoolean(usableOnServerSide)) {
            addGameVersion 'Server'
        }

        mainArtifact(shadowJar) {
            it.displayName = "${mod_display_name} ${mc_version}-${version}"
        }
    }
    options {
        debug = Boolean.parseBoolean("${uploadDebug}")
    }
}

modrinth {
    token = "${modrinthToken}"
    projectId = "${modrinth_project_id}"
    versionNumber = "${mc_version}-${version}"
    versionName = "${mod_display_name} ${mc_version}-${version}"
    changelog = rootProject.file("CHANGELOG.md").text
    uploadFile = shadowJar
    debugMode = Boolean.parseBoolean("${uploadDebug}")
}
